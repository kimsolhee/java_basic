package ch06;
class Ex6_1 { 
	public static void main(String args[]) { 
		
		/*
		 * 객체지향 언어
		 * 80년대 초 소프트웨어의 위기 -> 빠른 변화를 못쫓아가게 된다.
		 * 이를 해결하기 위해 객체지향 언어를 도입(절차적 -> 객체지향)
		 * 
		 * C언어에서 객체지향 개념을 더한게 C++
		 * 배우기가 어렵다.
		 * 
		 * C++ -> Java(1996년대)
		 * C++의 단점을 보완해서 나온게 Java.
		 * 
		 * 객체지향 언어의 장점
		 * - 코드의 재사용성이 높고 유지보수가 용이, 중복 코드 제거
		 * 
		 * 객체지향 언어 = 프로그래밍 언어 + 객체지향개념(규칙)
		 * 
		 * 객체지향의 특징 OOP(Object-Oriented Programming)
		 * - 캡슐화/상속/추상화/다형성
		 * 
		 * 
		 * 클래스와 객체
		 * 
		 * 클래스의 정의 - 클래스란 객체를 정의해 놓은 것
		 * 클래스의 용도 - 클래스는 객체를 생성하는데 사용
		 * 
		 * 객체의 정의 - 실제로 존재하는 것. 사물 또는 개념
		 * 객체의 용도 - 객체가 가지고 있는 기능과 속성에 따라 다름
		 * 
		 * ex) 클래스-제품 설계도, 객체-제품
		 * 
		 * 객체 = 속성(변수) + 기능(메서드)
		 * 
		 * 객체 : 모든 인스턴스를 대표하는 일반적 용어
		 * 인스턴스 : 특정 클래스로부터 생성된 객체(예:TV인스턴스)
		 *
		 *      인스턴스화
		 *  클래스      ->    인스턴스(객체)
		 * (설계도)          (제품)
		 * 
		 * 
		 */
		
		Tv t;                 // Tv클래스 타입의 참조변수 t를 선언
		t = new Tv();         // Tv인스턴스를 생성한 후, 생성된 Tv인스턴스의 주소를 t에 저장
		/*Tv   t      =     new   Tv();
		    (리모컨)  (연결)     (객체)*/
		t.channel = 7;        // Tv인스턴스의 멤버변수 channel의 값을 7로 한다.
		t.channelDown();      // Tv인스턴스의 메서드 channelDown()을 호출한다.
		System.out.println("현재 채널은  " + t.channel + " 입니다."); 
	} 
}
// 클래스 작성 -> 객체의 생성 -> 객체의 사용
// TV 설계도
class Tv { 
	// Tv의 속성(멤버변수)   
	String color;           // 색상
	boolean power;         	// 전원상태(on/off) 
	int channel;           	// 채널

	// Tv의 기능(메서드) 
	void power()   { power = !power; }  // TV를 켜거나 끄는 기능을 하는 메서드
	void channelUp()   {  ++channel; }  // TV의 채널을 높이는 기능을 하는 메서드
	void channelDown() { --channel; }   // TV의 채널을 낮추는 기능을 하는 메서드 
}

